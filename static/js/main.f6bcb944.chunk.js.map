{"version":3,"sources":["Step1.js","Step2.js","Step3.js","Instructions.js","App.js","serviceWorker.js","index.js"],"names":["Step1","props","react_default","a","createElement","className","id","question","currentStep","onClick","incrementStep","Step2","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getAnswerInput","event","setState","answerInput","target","value","correctAnswer","checkAnswer","preventDefault","state","toLowerCase","correctMethod","_this$props","onChange","Component","Step3","updateUserCode","newCode","userCode","getValue","getUserAnswer","correctResponse","checkUserAnswer","err","fnStr","split","trim","Function","evalCode","input","toString","questionCount","gameLength","renderInput","problemSetup","concat","react_codemirror2","options","mode","theme","lineNumbers","lineWrapping","length","Instructions","href","App","toggleInstructionsCard","showInstructions","_this$state","step","solvedProblemIds","problems","newStep","updateQuestion","updateGame","skip","arguments","undefined","_this$state2","unsolvedProblemIds","newUnsolvedProblems","slice","push","shift","newSolvedProblems","solvedProblem","localStorage","setItem","JSON","stringify","newRandomProblems","sort","b","Math","random","unsolvedProblems","map","clear","skipProblem","pullFromLocalStorage","hasOwnProperty","parse","getItem","getParsedInput","includes","replace","loaded","_this2","fetch","then","data","json","results","randomResults","filter","problem","inputDataType","reduce","acc","totalProblems","catch","error","console","log","_this$state3","currentProblem","find","parsedQuestion","parsedInput","difficulty","src_Step1","src_Step2","method","src_Step3","result","src_Instructions","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f6bcb944.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Step1(props) {\n  return (\n    <div className='step-containers' id='step-1-container'>\n      <div>\n        <h3>Step 1: Read The Problem</h3>\n        <p className='question-text'>{props.question}</p>\n      </div>\n      {\n        props.currentStep === 1 && \n        <button onClick={props.incrementStep}>Next Step</button>\n      }\n    </div>\n  )\n}\n\nexport default Step1;","import React, { Component } from 'react';\n\nclass Step2 extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      answerInput: '',\n      correctAnswer: ''\n    }\n  }\n\n  getAnswerInput = (event) => {\n    this.setState({\n      answerInput: event.target.value,\n      correctAnswer: ''\n    });\n  }\n\n  checkAnswer = (event) => {\n    event.preventDefault();\n    let correctAnswer = this.state.answerInput.toLowerCase() === this.props.correctMethod.toLowerCase() ? \n      'Correct! Click Next Step to continue.' : \n      'Sorry that is incorrect, please try again.';\n    this.setState({\n      correctAnswer: correctAnswer\n    });\n  }\n\n  render() {\n    let { currentStep, incrementStep } = this.props;\n\n    return (\n      <div className='step-containers' id='step-2-container'>\n        <div>\n          <h3>Step 2: Pick Your Method</h3>\n          <p>Which prototype method is best to use for this problem (ex. sort)?</p>\n          <label>Answer:\n          <input onChange={this.getAnswerInput}></input>\n          </label>\n          {\n            currentStep === 2 && <h4>{this.state.correctAnswer}</h4>\n          }\n        </div>\n        {\n          currentStep === 2 && (\n            this.state.correctAnswer === 'Correct! Click Next Step to continue.' ? \n              <button id='next-step-button-2' onClick={incrementStep}>Next Step</button> :\n              <button id='check-answer-button-2' onClick={this.checkAnswer}>Check Answer</button>\n            )\n        }\n      </div>\n    )\n  }\n}\n\nexport default Step2;","import React, { Component } from 'react';\nimport { UnControlled as CodeMirror } from 'react-codemirror2';\nimport './../node_modules/codemirror/lib/codemirror.css';\nimport './../node_modules/codemirror/theme/material.css';\nimport './../node_modules/codemirror/mode/javascript/javascript';\n\nclass Step3 extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userCode: '',\n      correctResponse: ''\n    }\n  }\n\n  updateUserCode = (newCode) => {\n    this.setState({\n      userCode: newCode.getValue()\n    });\n  }\n\n  getUserAnswer = (event) => {\n    event.preventDefault();\n    let correctResponse;\n    try {\n      correctResponse = this.checkUserAnswer();\n    }\n    catch(err) {\n      correctResponse = 'Sorry that is incorrect, please try again.'\n    }\n    finally {\n      this.setState({\n        correctResponse: correctResponse,\n      });\n    }\n  }\n\n  checkUserAnswer() {\n    let fnStr = this.state.userCode\n      .split('function solveProblem(arg) {')[1]\n      .split(`}\n  \n  var result = solveProblem(inputData);`)[0].trim();\n    let evalCode = new Function('arg', fnStr);\n    let resultStr = evalCode(this.props.input).toString();\n    let answerStr = this.props.correctAnswer.toString();\n    if (resultStr === answerStr) {\n      return this.props.questionCount + 1 === this.props.gameLength ?\n        'Correct, you completed all the problems! Click New Game.' :\n        'Correct! Click Next Problem to continue to the next problem.'\n    } else {\n      return 'Sorry that is incorrect, please try again.'\n    }\n  }\n\n  render() {\n    let { renderInput, incrementStep, currentStep, questionCount, gameLength } = this.props;\n    let problemSetup = `  var inputData = ${renderInput};\n      \n  function solveProblem(arg) {\n    // Apply the prototype to your input here\n    // Remember to return the result.\n  }\n  \n  var result = solveProblem(inputData);`;\n    return (\n      <div className='step-containers' id='step-3-container'>\n        <div>\n          <h3>Step 3: Let's Solve The Problem</h3>\n          <p>Here's the setup:</p>\n          <CodeMirror \n            options={{\n              mode: 'javascript',\n              theme: 'material',\n              lineNumbers: true,\n              lineWrapping: true\n            }}\n            value={problemSetup}\n            className='code-editor'\n            onChange={this.updateUserCode} \n          />\n          {\n            currentStep === 3 && <h4>{this.state.correctResponse}</h4>\n          }\n        </div>\n        {\n          currentStep === 3 && (\n            this.state.correctResponse.length > 42 ?\n            <button id='next-step-button-3' onClick={incrementStep}>\n              {\n                questionCount + 1 === gameLength ? 'New Game' : 'Next Problem'\n              }\n            </button> :\n            <button id='check-answer-button-3' onClick={this.getUserAnswer}>Check Answer</button>\n          )\n        }\n      </div>\n    )\n  }\n}\n\nexport default Step3;","import React from 'react';\n\nfunction Instructions() {\n  return (\n    <div className='instruction-container'>\n      <h3>Instructions</h3>\n      <p>Here's how to use this page to practice your prototype methods:</p>\n      <ul>\n        <li>Step 1: Read The Problem. Once you understand what the problem is asking, click on the Next Step button</li>\n        <li>Step 2: Pick Your Method. Enter the best prototype method to solve this problem and then click on the Check Answer button to see if you are correct. If your answer is correct, click on the Next Step button. If your answer is incorrect, please try again!</li>\n        <li>Step 3: Let's Solve The Problem. No we can code out the solution to the problem. Enter your answer in the text box and click the Check Answer button. If your answer is correct, click on the Next Problem button to move on to the next problem. If your answer is incorrect, please try again!</li>\n      </ul>\n      <p>If you are having trouble solving the problem, check out the documentation <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript'>HERE</a> for some help.</p>\n    </div>\n  )\n}\n\nexport default Instructions;","import React, { Component } from 'react';\nimport './App.css';\nimport './styles/normalize.css';\nimport './styles/main.scss';\nimport Step1 from './Step1.js';\nimport Step2 from './Step2.js';\nimport Step3 from './Step3.js';\nimport Instructions from './Instructions.js';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      step: 1,\n      showInstructions: false,\n      problems: [],\n      solvedProblemIds: [],\n      unsolvedProblemIds: [],\n      loaded: false\n    }\n  }\n\n  toggleInstructionsCard = () => {\n    this.setState({\n      showInstructions: !this.state.showInstructions\n    });\n  }\n\n  incrementStep = () => {\n    let { step, solvedProblemIds, problems } = this.state;\n    let newStep = step < 3 ? step + 1 : 1;\n    this.setState({\n      step: newStep\n    });\n    if (newStep === 1) {\n      solvedProblemIds.length !== problems.length ? this.updateQuestion() : this.updateGame();\n    } \n  }\n\n  updateQuestion = (skip = false) => {\n    let { unsolvedProblemIds, solvedProblemIds } = this.state;\n    if (skip) {\n      let newUnsolvedProblems = unsolvedProblemIds.slice();\n      newUnsolvedProblems.push(newUnsolvedProblems.shift());\n      this.setState({\n        unsolvedProblemIds: newUnsolvedProblems,\n        step: 1\n      })\n    } else {\n      let newUnsolvedProblems = unsolvedProblemIds.slice();\n      let newSolvedProblems = solvedProblemIds.slice();\n      let solvedProblem = newUnsolvedProblems.shift();\n      newSolvedProblems.push(solvedProblem);\n      this.setState({ \n        solvedProblemIds: newSolvedProblems,\n        unsolvedProblemIds: newUnsolvedProblems,\n        step: 1\n      })\n      localStorage.setItem('solvedProblems', JSON.stringify(newSolvedProblems));\n    }\n  }\n\n  updateGame = () => {\n    let newRandomProblems = this.state.problems.sort((a, b) => 0.5 - Math.random());\n    let unsolvedProblems = newRandomProblems.map(question => question.question);\n    this.setState({\n      problems: newRandomProblems,\n      unsolvedProblemIds: unsolvedProblems,\n      solvedProblemIds: [],\n      step: 1\n    });\n    localStorage.clear('solvedProblems');\n  }\n\n  skipProblem = (event) => {\n    event.preventDefault();\n    this.updateQuestion(true);\n  }\n\n  pullFromLocalStorage = () => {\n    if (localStorage.hasOwnProperty('solvedProblems')) {\n      let solvedProblemIds = JSON.parse(localStorage.getItem('solvedProblems'));\n      this.setState({\n        solvedProblemIds: solvedProblemIds\n      });\n    }\n  }\n\n  getParsedInput = (input) => {\n    return input.includes('{') ? input.replace('.', '') : JSON.stringify(input).replace(/\"/g, \"'\");\n  }\n\n  componentDidMount() {\n    this.pullFromLocalStorage();\n    fetch('https://memoize-datasets.herokuapp.com/api/v1/problems')\n      .then(data => data.json())\n      .then(results => {\n        let randomResults = results.problems\n          .filter(problem => problem.inputDataType !== 'object')\n          .sort((a, b) => 0.5 - Math.random());\n        let unsolvedProblems = randomResults.reduce((acc, problem) => {\n          if (!this.state.solvedProblemIds.includes(problem.question)) {\n            acc.push(problem.question)\n          }\n          return acc\n        }, []);\n        this.setState({\n          problems: randomResults,\n          totalProblems: randomResults.length,\n          unsolvedProblemIds: unsolvedProblems,\n          loaded: true\n        });\n      })\n      .catch(error => console.log(error));\n  }\n\n  render() {\n    if (this.state.loaded === true) {\n      let { step, showInstructions, problems, solvedProblemIds, unsolvedProblemIds } = this.state;\n      let currentProblem = problems.find(problem => problem.question.includes(unsolvedProblemIds[0]));\n      let parsedQuestion = currentProblem.question.replace('. ', '.\\n\\n');\n      let parsedInput = this.getParsedInput(currentProblem.input);\n      return (\n        <div>\n          <header>\n            <div className='left-info-container'>\n              <h2>\n                {solvedProblemIds.length} of {problems.length} problems solved\n                <span id='difficulty-text'>Current problem difficulty: {currentProblem.difficulty}</span>\n              </h2>\n              <button onClick={this.skipProblem} className='app-buttons' id='skip-button'>Skip Problem</button>\n            </div>\n            <h1>[ jsProtoFunTime ]</h1>\n            <div className='right-header-buttons'>\n              <button onClick={this.toggleInstructionsCard} className='app-buttons' id='instructions-button'>\n              {\n                showInstructions ? 'Hide Instructions' : 'Show Instructions'\n              }\n              </button>\n              <button onClick={this.updateGame} className='app-buttons' id='restart-button'>Start New Game</button>\n            </div>\n          </header>\n          <div className='game-container'>\n            <Step1 \n              incrementStep={this.incrementStep}\n              question={parsedQuestion}\n              currentStep={step}\n            />\n            {\n              step > 1 && \n              <Step2 \n                incrementStep={this.incrementStep}\n                correctMethod={currentProblem.method}\n                currentStep={step}\n              />\n            }\n            {\n              step > 2 && \n              <Step3 \n                incrementStep={this.incrementStep} \n                correctAnswer={currentProblem.result}\n                input={currentProblem.input}\n                renderInput = {parsedInput}\n                questionCount={solvedProblemIds.length}\n                gameLength={problems.length}\n                currentStep={step}\n              />\n            }\n          </div>\n          {\n            showInstructions && <Instructions />\n          }\n        </div>\n      );\n    } else {\n      return (\n        <div></div>\n      )\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}